{"version":3,"sources":["webpack:///src/app/features/contact/shared/forms/contact.form.ts","webpack:///src/app/features/contact/contact/contact.component.html","webpack:///src/app/features/contact/contact-routing.module.ts","webpack:///src/app/features/contact/contact/contact.component.ts","webpack:///src/app/features/contact/contact.module.ts"],"names":["data","super","name","_replyto","email","message","required","_language","this","patchValue","ContactComponent","ContactRoutingModule","ContactModule","routes","path","component","children","snackbar","http","endpoint","languages","sending$","BehaviorSubject","contactForm","getLanguage","userLanguages","filter","l","navigator","language","includes","length","next","post","value","pipe","finalize","subscribe","val","open","duration","err","panelClass","sendMessage","forChild"],"mappings":"+xCAEa,E,gQACT,WAAYA,0BACRC,cAAM,CACFC,KAAM,IAAI,IAAY,IACtBC,SAAU,IAAI,IAAY,GAAI,IAAWC,OACzCC,QAAS,IAAI,IAAY,GAAI,IAAWC,UACxCC,UAAW,IAAI,IAAY,KAAM,IAAWD,YAG5CN,GACAQ,EAAKC,WAAWT,GATZA,E,UADiB,K,8IC+BL,oBAEK,6CAAkC,QC7BnE,ICKaU,EDOAC,EEDAC,EFXPC,EAAiB,CACnB,CACIC,KAAM,GACNC,UAAW,IACXC,SAAU,CAAC,CAAEF,KAAM,GAAIC,WCClBL,EAAN,WAyCH,WAAoBO,EAA+BC,aAA/B,KAAAD,WAA+B,KAAAC,OAxC3C,KAAAC,SAAmB,kCACnB,KAAAC,UAAsB,CAC1B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,S,UAnCD,O,EAAA,G,EAAA,kCA4CCZ,KAAKa,SAAW,IAAIC,EAAA,MACpBd,KAAKe,YAAc,IAAI,EAAY,CAC/BhB,UAAWC,KAAKgB,kBA9CrB,oCAsDC,IAAMC,EAAgBjB,KAAKY,UAAUM,OAAQC,YAAC,OAC1CC,UAAUC,SAASC,SAASH,KAEhC,OAAOF,EAAcM,OAAS,EAAIN,EAAc,GAAK,OAzDtD,oCA4DU,WACTjB,KAAKa,SAASW,MAAK,GACnBxB,KAAKU,KACAe,KAAKzB,KAAKW,SAAUX,KAAKe,YAAYW,OACrCC,KAAK,OAAAC,EAAA,GAAS,kBAAM5B,EAAKa,SAASW,MAAK,MACvCK,UACIC,YAAG,OACA9B,EAAKS,SAASsB,KACV,wCACA,GACA,CACIC,SAAU,OAGrBC,YACGjC,EAAKS,SAASsB,KACV,uEACA,GACA,CACIG,WAAY,iBACZF,SAAU,a,2BAhF/B,K,sCAAM9B,GAAgB,sB,uBAAhBA,EAAgB,wqBFX7B,iBACI,mBACI,yBACI,aAAI,kBAAO,OACf,OACA,2BACI,iBAAgC,kCAAY,EAAAiC,gBACxC,gBACI,gBACI,2BACI,qBAAW,gBAAI,OACf,mBAKA,oBACK,0FAC8B,OAEvC,OAEA,4BACI,qBAAW,iBAAK,OAChB,mBAKA,oBACK,4EACgB,OAErB,6BAIJ,OACJ,OAEA,4BACI,qBAAW,wBAAY,OACvB,sBAKJ,OACA,qB,iBAOI,S,iBACA,sBACJ,OACJ,OACJ,OACJ,OACJ,OACJ,Q,MAxDkB,wCA4Be,4DAkBT,qEAGA,oE,oXCrCjB,IAAMhC,EAAN,yB,qBAAMA,I,oDAAAA,IAAoB,SAHpB,CAAC,IAAaiC,SAAS/B,IACtB,O,eECP,IAAMD,EAAN,yB,qBAAMA,I,oDAAAA,IAAa,SAPb,CACL,IACA,EACA,IACA,Q","file":"x","sourcesContent":["import { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\nexport class ContactForm extends FormGroup {\r\n    constructor(data: { [key: string]: any | undefined } = undefined) {\r\n        super({\r\n            name: new FormControl(''),\r\n            _replyto: new FormControl('', Validators.email),\r\n            message: new FormControl('', Validators.required),\r\n            _language: new FormControl('en', Validators.required),\r\n        });\r\n\r\n        if (data) {\r\n            this.patchValue(data);\r\n        }\r\n    }\r\n}\r\n","<main class=\"container\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n    <mat-card>\r\n        <mat-card-title>\r\n            <h1>Contact</h1>\r\n        </mat-card-title>\r\n        <mat-card-content>\r\n            <form [formGroup]=\"contactForm\" (ngSubmit)=\"sendMessage()\">\r\n                <div fxLayout=\"column\" fxLayoutGap=\"1em\">\r\n                    <div fxLayout=\"row\" fxLayoutGap=\"40px\">\r\n                        <mat-form-field appearance=\"standard\" fxFlex=\"1 1 0\">\r\n                            <mat-label>Name</mat-label>\r\n                            <input\r\n                                matInput\r\n                                placeholder=\"Your name\"\r\n                                formControlName=\"name\"\r\n                            />\r\n                            <mat-hint\r\n                                >(not required, but necessary if you want me to\r\n                                credit you for your submission)</mat-hint\r\n                            >\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field appearance=\"standard\" fxFlex=\"1 1 0\">\r\n                            <mat-label>Email</mat-label>\r\n                            <input\r\n                                matInput\r\n                                placeholder=\"Your email\"\r\n                                formControlName=\"_replyto\"\r\n                            />\r\n                            <mat-hint\r\n                                >(not required, but necessary if you need me to\r\n                                contact you back)</mat-hint\r\n                            >\r\n                            <mat-error\r\n                                *ngIf=\"contactForm.get('_replyto').invalid\"\r\n                                >This is not a valid e-mail address</mat-error\r\n                            >\r\n                        </mat-form-field>\r\n                    </div>\r\n\r\n                    <mat-form-field appearance=\"standard\">\r\n                        <mat-label>Your message</mat-label>\r\n                        <textarea\r\n                            matInput\r\n                            formControlName=\"message\"\r\n                            placeholder=\"Type your message here!\"\r\n                        ></textarea>\r\n                    </mat-form-field>\r\n                    <button\r\n                        mat-raised-button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        [disabled]=\"!contactForm.valid || (sending$ | async)\"\r\n                        fxFlexAlign=\"center\"\r\n                    >\r\n                        {{ (sending$ | async) ? 'Sending...' : 'Submit' }}\r\n                        <fa-icon icon=\"paper-plane\"></fa-icon>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</main>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BaseLayoutComponent } from '../layout/base-layout/base-layout.component';\r\n\r\nimport { ContactComponent } from './contact/contact.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: BaseLayoutComponent,\r\n        children: [{ path: '', component: ContactComponent }],\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class ContactRoutingModule {}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, throwError } from 'rxjs';\r\nimport { debounceTime, delay, finalize } from 'rxjs/operators';\r\nimport { ContactForm } from '../shared/forms/contact.form';\r\n\r\n@Component({\r\n    templateUrl: './contact.component.html',\r\n    styleUrls: ['./contact.component.scss'],\r\n})\r\nexport class ContactComponent implements OnInit {\r\n    private endpoint: string = 'https://formspree.io/f/xleoogop';\r\n    private languages: string[] = [\r\n        'ar',\r\n        'bg',\r\n        'ca',\r\n        'cs',\r\n        'da',\r\n        'de',\r\n        'es',\r\n        'et',\r\n        'fi',\r\n        'fr',\r\n        'hr',\r\n        'hu',\r\n        'id',\r\n        'is',\r\n        'it',\r\n        'ja',\r\n        'ko',\r\n        'lt',\r\n        'nl',\r\n        'no',\r\n        'pl',\r\n        'pt-BR',\r\n        'pt-PT',\r\n        'ru',\r\n        'sk',\r\n        'sl',\r\n        'sr',\r\n        'sv',\r\n        'th',\r\n        'tr',\r\n        'uk',\r\n        'zh-CN',\r\n        'zh-TW',\r\n    ];\r\n\r\n    public contactForm: ContactForm;\r\n    public sending$: BehaviorSubject<boolean>;\r\n\r\n    constructor(private snackbar: MatSnackBar, private http: HttpClient) {}\r\n\r\n    ngOnInit(): void {\r\n        this.sending$ = new BehaviorSubject(false);\r\n        this.contactForm = new ContactForm({\r\n            _language: this.getLanguage(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This function will return a language supported by formspree depending on the user's language.\r\n     */\r\n    getLanguage(): string {\r\n        const userLanguages = this.languages.filter((l) =>\r\n            navigator.language.includes(l)\r\n        );\r\n        return userLanguages.length > 0 ? userLanguages[0] : 'en';\r\n    }\r\n\r\n    sendMessage() {\r\n        this.sending$.next(true);\r\n        this.http\r\n            .post(this.endpoint, this.contactForm.value)\r\n            .pipe(finalize(() => this.sending$.next(false)))\r\n            .subscribe(\r\n                (val) =>\r\n                    this.snackbar.open(\r\n                        'Message sent successfully. Thank you!',\r\n                        '',\r\n                        {\r\n                            duration: 4000,\r\n                        }\r\n                    ),\r\n                (err) => {\r\n                    this.snackbar.open(\r\n                        'An error occurred while sending the message. Please try again later.',\r\n                        '',\r\n                        {\r\n                            panelClass: 'snackbar-error',\r\n                            duration: 4000,\r\n                        }\r\n                    );\r\n                }\r\n            );\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { ContactRoutingModule } from './contact-routing.module';\r\nimport { ContactComponent } from './contact/contact.component';\r\nimport { SharedModule } from '@app/shared/shared.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n    declarations: [ContactComponent],\r\n    imports: [\r\n        SharedModule,\r\n        ContactRoutingModule,\r\n        ReactiveFormsModule,\r\n        HttpClientModule,\r\n    ],\r\n})\r\nexport class ContactModule {}\r\n"]}