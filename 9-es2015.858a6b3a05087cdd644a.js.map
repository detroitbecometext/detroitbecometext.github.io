{"version":3,"sources":["webpack:///src/app/features/contact/shared/forms/contact.form.ts","webpack:///src/app/features/contact/contact/contact.component.html","webpack:///src/app/features/contact/contact-routing.module.ts","webpack:///src/app/features/contact/contact/contact.component.ts","webpack:///src/app/features/contact/contact.module.ts"],"names":["data","super","name","_replyto","email","message","required","_language","this","patchValue","routes","path","component","children","ContactComponent","snackbar","http","endpoint","languages","sending$","BehaviorSubject","contactForm","getLanguage","userLanguages","filter","l","navigator","language","includes","length","next","post","value","pipe","finalize","subscribe","val","open","duration","err","panelClass","sendMessage","ContactRoutingModule","forChild","ContactModule"],"mappings":"gNAEO,MAAM,UAAoB,IAC7B,YAAYA,GACRC,MAAM,CACFC,KAAM,IAAI,IAAY,IACtBC,SAAU,IAAI,IAAY,GAAI,IAAWC,OACzCC,QAAS,IAAI,IAAY,GAAI,IAAWC,UACxCC,UAAW,IAAI,IAAY,KAAM,IAAWD,YAG5CN,GACAQ,KAAKC,WAAWT,I,kJCqBA,oBAEK,6CAAkC,QC7BnE,MAAMU,EAAiB,CACnB,CACIC,KAAM,GACNC,UAAW,IACXC,SAAU,CAAC,CAAEF,KAAM,GAAIC,UCCxB,M,MAAME,EAyCT,YAAoBC,EAA+BC,GAA/B,KAAAD,WAA+B,KAAAC,OAxC3C,KAAAC,SAAmB,kCACnB,KAAAC,UAAsB,CAC1B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,SAQJ,WACIV,KAAKW,SAAW,IAAIC,EAAA,GAAgB,GACpCZ,KAAKa,YAAc,IAAI,EAAY,CAC/Bd,UAAWC,KAAKc,gBAOxB,cACI,MAAMC,EAAgBf,KAAKU,UAAUM,OAAQC,GACzCC,UAAUC,SAASC,SAASH,IAEhC,OAAOF,EAAcM,OAAS,EAAIN,EAAc,GAAK,KAGzD,cACIf,KAAKW,SAASW,MAAK,GACnBtB,KAAKQ,KACAe,KAAKvB,KAAKS,SAAUT,KAAKa,YAAYW,OACrCC,KAAK,OAAAC,EAAA,GAAS,IAAM1B,KAAKW,SAASW,MAAK,KACvCK,UACIC,GACG5B,KAAKO,SAASsB,KACV,wCACA,GACA,CACIC,SAAU,MAGrBC,IACG/B,KAAKO,SAASsB,KACV,uEACA,GACA,CACIG,WAAY,iBACZF,SAAU,S,6CAhFzBxB,GAAgB,sB,uBAAhBA,EAAgB,wqBFX7B,iBACI,mBACI,yBACI,aAAI,kBAAO,OACf,OACA,2BACI,iBAAgC,kCAAY,EAAA2B,gBACxC,gBACI,gBACI,2BACI,qBAAW,gBAAI,OACf,mBAKA,oBACK,0FAC8B,OAEvC,OAEA,4BACI,qBAAW,iBAAK,OAChB,mBAKA,oBACK,4EACgB,OAErB,6BAIJ,OACJ,OAEA,4BACI,qBAAW,wBAAY,OACvB,sBAKJ,OACA,qB,iBAOI,S,iBACA,sBACJ,OACJ,OACJ,OACJ,OACJ,OACJ,Q,MAxDkB,wCA4Be,4DAkBT,qEAGA,oE,gXE5CjB,ODOA,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAAoB,SAHpB,CAAC,IAAaC,SAASjC,IACtB,O,GAEP,G,gBEDA,Y,MAAMkC,G,8BAAAA,I,oDAAAA,IAAa,SAPb,CACL,IACA,EACA,IACA,Q,GAGD","file":"x","sourcesContent":["import { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\nexport class ContactForm extends FormGroup {\r\n    constructor(data: { [key: string]: any | undefined } = undefined) {\r\n        super({\r\n            name: new FormControl(''),\r\n            _replyto: new FormControl('', Validators.email),\r\n            message: new FormControl('', Validators.required),\r\n            _language: new FormControl('en', Validators.required),\r\n        });\r\n\r\n        if (data) {\r\n            this.patchValue(data);\r\n        }\r\n    }\r\n}\r\n","<main class=\"container\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n    <mat-card>\n        <mat-card-title>\n            <h1>Contact</h1>\n        </mat-card-title>\n        <mat-card-content>\n            <form [formGroup]=\"contactForm\" (ngSubmit)=\"sendMessage()\">\n                <div fxLayout=\"column\" fxLayoutGap=\"1em\">\n                    <div fxLayout=\"row\" fxLayoutGap=\"40px\">\n                        <mat-form-field appearance=\"standard\" fxFlex=\"1 1 0\">\n                            <mat-label>Name</mat-label>\n                            <input\n                                matInput\n                                placeholder=\"Your name\"\n                                formControlName=\"name\"\n                            />\n                            <mat-hint\n                                >(not required, but necessary if you want me to\n                                credit you for your submission)</mat-hint\n                            >\n                        </mat-form-field>\n\n                        <mat-form-field appearance=\"standard\" fxFlex=\"1 1 0\">\n                            <mat-label>Email</mat-label>\n                            <input\n                                matInput\n                                placeholder=\"Your email\"\n                                formControlName=\"_replyto\"\n                            />\n                            <mat-hint\n                                >(not required, but necessary if you need me to\n                                contact you back)</mat-hint\n                            >\n                            <mat-error\n                                *ngIf=\"contactForm.get('_replyto').invalid\"\n                                >This is not a valid e-mail address</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n\n                    <mat-form-field appearance=\"standard\">\n                        <mat-label>Your message</mat-label>\n                        <textarea\n                            matInput\n                            formControlName=\"message\"\n                            placeholder=\"Type your message here!\"\n                        ></textarea>\n                    </mat-form-field>\n                    <button\n                        mat-raised-button\n                        color=\"primary\"\n                        type=\"submit\"\n                        [disabled]=\"!contactForm.valid || (sending$ | async)\"\n                        fxFlexAlign=\"center\"\n                    >\n                        {{ (sending$ | async) ? 'Sending...' : 'Submit' }}\n                        <fa-icon icon=\"paper-plane\"></fa-icon>\n                    </button>\n                </div>\n            </form>\n        </mat-card-content>\n    </mat-card>\n</main>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BaseLayoutComponent } from '../layout/base-layout/base-layout.component';\n\nimport { ContactComponent } from './contact/contact.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: BaseLayoutComponent,\n        children: [{ path: '', component: ContactComponent }],\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class ContactRoutingModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { debounceTime, delay, finalize } from 'rxjs/operators';\nimport { ContactForm } from '../shared/forms/contact.form';\n\n@Component({\n    templateUrl: './contact.component.html',\n    styleUrls: ['./contact.component.scss'],\n})\nexport class ContactComponent implements OnInit {\n    private endpoint: string = 'https://formspree.io/f/xleoogop';\n    private languages: string[] = [\n        'ar',\n        'bg',\n        'ca',\n        'cs',\n        'da',\n        'de',\n        'es',\n        'et',\n        'fi',\n        'fr',\n        'hr',\n        'hu',\n        'id',\n        'is',\n        'it',\n        'ja',\n        'ko',\n        'lt',\n        'nl',\n        'no',\n        'pl',\n        'pt-BR',\n        'pt-PT',\n        'ru',\n        'sk',\n        'sl',\n        'sr',\n        'sv',\n        'th',\n        'tr',\n        'uk',\n        'zh-CN',\n        'zh-TW',\n    ];\n\n    public contactForm: ContactForm;\n    public sending$: BehaviorSubject<boolean>;\n\n    constructor(private snackbar: MatSnackBar, private http: HttpClient) {}\n\n    ngOnInit(): void {\n        this.sending$ = new BehaviorSubject(false);\n        this.contactForm = new ContactForm({\n            _language: this.getLanguage(),\n        });\n    }\n\n    /**\n     * This function will return a language supported by formspree depending on the user's language.\n     */\n    getLanguage(): string {\n        const userLanguages = this.languages.filter((l) =>\n            navigator.language.includes(l)\n        );\n        return userLanguages.length > 0 ? userLanguages[0] : 'en';\n    }\n\n    sendMessage() {\n        this.sending$.next(true);\n        this.http\n            .post(this.endpoint, this.contactForm.value)\n            .pipe(finalize(() => this.sending$.next(false)))\n            .subscribe(\n                (val) =>\n                    this.snackbar.open(\n                        'Message sent successfully. Thank you!',\n                        '',\n                        {\n                            duration: 4000,\n                        }\n                    ),\n                (err) => {\n                    this.snackbar.open(\n                        'An error occurred while sending the message. Please try again later.',\n                        '',\n                        {\n                            panelClass: 'snackbar-error',\n                            duration: 4000,\n                        }\n                    );\n                }\n            );\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { ContactRoutingModule } from './contact-routing.module';\nimport { ContactComponent } from './contact/contact.component';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n    declarations: [ContactComponent],\n    imports: [\n        SharedModule,\n        ContactRoutingModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n    ],\n})\nexport class ContactModule {}\n"]}